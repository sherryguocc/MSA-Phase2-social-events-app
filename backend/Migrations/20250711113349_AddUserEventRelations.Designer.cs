// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250711113349_AddUserEventRelations")]
    partial class AddUserEventRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("EventUser", b =>
                {
                    b.Property<int>("ParticipantsEventsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParticipantsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParticipantsEventsId", "ParticipantsId");

                    b.HasIndex("ParticipantsId");

                    b.ToTable("EventParticipants", (string)null);
                });

            modelBuilder.Entity("EventUser1", b =>
                {
                    b.Property<int>("InterestedEventsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InterestedUsersId")
                        .HasColumnType("INTEGER");

                    b.HasKey("InterestedEventsId", "InterestedUsersId");

                    b.HasIndex("InterestedUsersId");

                    b.ToTable("EventInterestedUsers", (string)null);
                });

            modelBuilder.Entity("EventUser2", b =>
                {
                    b.Property<int>("WaitlistEventsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WaitlistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("WaitlistEventsId", "WaitlistId");

                    b.HasIndex("WaitlistId");

                    b.ToTable("EventWaitlist", (string)null);
                });

            modelBuilder.Entity("backend.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatedById")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAttendees")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAttendees")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventUser", b =>
                {
                    b.HasOne("backend.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventUser1", b =>
                {
                    b.HasOne("backend.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("InterestedEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("InterestedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventUser2", b =>
                {
                    b.HasOne("backend.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("WaitlistEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", null)
                        .WithMany()
                        .HasForeignKey("WaitlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Models.Event", b =>
                {
                    b.HasOne("backend.Models.User", "CreatedBy")
                        .WithMany("CreatedEvents")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Navigation("CreatedEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
